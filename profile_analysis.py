"""
Script de profiling pour identifier les goulots d'√©tranglement
TP1 - Programmation Parall√®le
"""

import cProfile
import pstats
import pandas as pd
import os
from preprocessing import TweetPreprocessor

def profile_preprocessing():
    """
    Fonction principale pour profiler le preprocessing
    """
    
    # V√©rifier que les donn√©es existent
    if not os.path.exists('data/tweets_medium.csv'):
        print("‚ùå Erreur: Fichier data/tweets_medium.csv non trouv√©!")
        print("   Ex√©cutez d'abord: python download_data.py")
        return
    
    # Charger les donn√©es
    print("üìä Chargement des donn√©es...")
    df = pd.read_csv('data/tweets_medium.csv')
    tweets = df['text'].tolist()
    print(f"   ‚úÖ {len(tweets)} tweets charg√©s")
    
    # Cr√©er le preprocessor
    processor = TweetPreprocessor()
    
    print("\nüîç Lancement du profiling...")
    print("-" * 60)
    
    # ========================================================================
    # TODO-PROF1: Ajoutez le code de profiling avec cProfile
    # ========================================================================
    # Instructions :
    # 1. Cr√©er un profiler avec : profiler = cProfile.Profile()
    # 2. Activer le profiling avec : profiler.enable()
    # 3. Ex√©cuter le traitement : processor.process_batch(tweets)
    # 4. D√©sactiver le profiling : profiler.disable()
    # 5. Cr√©er les statistiques : stats = pstats.Stats(profiler)
    # 6. Trier par temps cumul√© : stats.sort_stats('cumulative')
    # 7. Afficher un titre : print("\nüîù Top 10 fonctions les plus lentes:")
    # 8. Afficher les stats : stats.print_stats(10)
    # 9. Si possible, calculer et afficher :
    #    - Le temps total d'ex√©cution
    #    - Le temps moyen par tweet
    # ========================================================================
    
    # √Ä IMPL√âMENTER
    
    print("\n‚ö†Ô∏è  TODO-PROF1 non impl√©ment√©")
    print("   Compl√©tez le code de profiling dans profile_analysis.py")


if __name__ == "__main__":
    profile_preprocessing()
